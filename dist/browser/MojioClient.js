!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var o;"undefined"!=typeof window?o=window:"undefined"!=typeof global?o=global:"undefined"!=typeof self&&(o=self),o.MojioClient=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var HttpBrowserWrapper;

  module.exports = HttpBrowserWrapper = (function() {
    var dataByMethod, sendRequest;

    function HttpBrowserWrapper($) {
      this.$ = $;
    }

    dataByMethod = function(data, method) {
      switch (method.toUpperCase()) {
        case 'POST':
        case 'PUT':
          return JSON.stringify(data);
        default:
          return data;
      }
    };

    sendRequest = function(url, data, method, headers) {
      return this.$.ajax(url, {
        data: dataByMethod(data, method),
        headers: headers,
        contentType: "application/json",
        type: method,
        cache: false,
        error: function(obj, status, error) {
          return console.log('Error during request: (' + status + ') ' + error);
        }
      });
    };

    HttpBrowserWrapper.prototype.request = function(params, callback) {
      var url;
      if (params.method == null) {
        params.method = "GET";
      }
      if ((params.host == null) && (params.hostname != null)) {
        params.host = params.hostname;
      }
      if (params.scheme == null) {
        params.scheme = window.location.protocol.split(':')[0];
      }
      if (params.scheme === 'file') {
        params.scheme = 'http';
      }
      if (params.data == null) {
        params.data = {};
      }
      if (params.headers == null) {
        params.headers = {};
      }
      url = params.scheme + "://" + params.host + ":" + params.port + params.path;
      return sendRequest(url, params.data, params.method, params.headers).done(function(result) {
        return callback(null, result);
      }).fail(function() {
        return callback("Failed", null);
      });
    };

    return HttpBrowserWrapper;

  })();

}).call(this);

//# sourceMappingURL=HttpBrowserWrapper.map

},{}],2:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Http, MojioClient;

  Http = _dereq_('./HttpBrowserWrapper');

  module.exports = MojioClient = (function() {
    var defaults;

    defaults = {
      hostname: 'sandbox.api.moj.io',
      port: '80',
      version: 'v1'
    };

    function MojioClient(options) {
      var _base, _base1, _base2;
      this.options = options;
      if (this.options == null) {
        this.options = {
          hostname: defaults.hostname,
          port: this.defaults.port,
          version: this.defaults.version
        };
      }
      if ((_base = this.options).hostname == null) {
        _base.hostname = defaults.hostname;
      }
      if ((_base1 = this.options).port == null) {
        _base1.port = defaults.port;
      }
      if ((_base2 = this.options).version == null) {
        _base2.version = defaults.version;
      }
      this.options.application = this.options.application;
      this.options.secret = this.options.secret;
    }


    /*
        Helpers
     */

    MojioClient.prototype._makeParameters = function(params) {
      var property, query, value;
      if (params.length === 0) {
        '';
      }
      query = '?';
      for (property in params) {
        value = params[property];
        query += "" + property + "=" + value + "&";
      }
      return query.slice(0, -1);
    };

    MojioClient.prototype.request = function(request, callback) {
      var http, parts;
      parts = {
        hostname: this.options.hostname,
        host: this.options.hostname,
        port: this.options.port,
        path: '/' + this.options.version,
        method: request.method,
        withCredentials: false
      };
      if ((request.resource != null)) {
        parts.path += '/' + request.resource;
      }
      if ((request.id != null) && request.id !== '') {
        parts.path += '/' + request.id;
      }
      if ((request.parameters != null) && Object.keys(request.parameters).length > 0) {
        parts.path += this._makeParameters(request.parameters);
      }
      parts.headers = {};
      if (this.token != null) {
        parts.headers["MojioAPIToken"] = this.token;
      }
      if ((request.headers != null)) {
        parts.headers += request.headers;
      }
      if (request.body) {
        parts.body = request.body;
      }
      http = new Http($);
      return http.request(parts, callback);
    };


    /*
        Login
     */

    MojioClient.prototype.login_resource = 'Login';

    MojioClient.prototype._login = function(username, password, callback) {
      return this.request({
        method: 'POST',
        resource: this.login_resource,
        id: this.options.application,
        parameters: {
          userOrEmail: username,
          password: password,
          secretKey: this.options.secret
        }
      }, callback);
    };

    MojioClient.prototype.login = function(username, password, callback) {
      return this._login(username, password, (function(_this) {
        return function(error, result) {
          if ((result != null)) {
            _this.token = result._id;
          }
          return callback(error, result);
        };
      })(this));
    };

    MojioClient.prototype._logout = function(callback) {
      return this.request({
        method: 'DELETE',
        resource: this.login_resource,
        id: typeof mojio_token !== "undefined" && mojio_token !== null ? mojio_token : this.token
      }, callback);
    };

    MojioClient.prototype.logout = function(callback) {
      return this._logout((function(_this) {
        return function(error, result) {
          _this.token = null;
          return callback(error, result);
        };
      })(this));
    };


    /*
        CRUD
     */

    MojioClient.prototype.get = function(request, callback) {
      return this.request(request, callback);
    };

    MojioClient.prototype.post = function(request, callback) {
      return this.request(request, callback);
    };

    MojioClient.prototype.put = function(request, callback) {
      return this.request(request, callback);
    };

    MojioClient.prototype["delete"] = function(request, callback) {
      return this.request(request, callback);
    };


    /*
    App
     */

    MojioClient.prototype.apps_resource = 'Apps';

    MojioClient.prototype._apps = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.apps_resource
      }, callback);
    };

    MojioClient.prototype.apps = function(callback) {
      return this._apps((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };

    MojioClient.prototype.getAppById = function(id, callback) {
      return this.request({
        method: 'GET',
        resource: this.apps_resource,
        parameters: {
          id: id
        }
      }, callback);
    };

    MojioClient.prototype.getApp = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.apps_resource,
        id: this.options.application
      }, callback);
    };

    MojioClient.prototype.putApp = function(app_model, callback) {
      return this.request({
        method: 'PUT',
        resource: this.apps_resource,
        parameters: app_model
      }, callback);
    };


    /*
    Mojio
     */

    MojioClient.prototype.mojios_resource = 'Mojios';

    MojioClient.prototype._mojios = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.mojios_resource
      }, callback);
    };

    MojioClient.prototype.mojios = function(callback) {
      return this._mojios((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    Trip
     */

    MojioClient.prototype.trips_resource = 'Trips';

    MojioClient.prototype._trips = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.trips_resource
      }, callback);
    };

    MojioClient.prototype.trips = function(callback) {
      return this._trips((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    User
     */

    MojioClient.prototype.users_resource = 'Users';

    MojioClient.prototype._users = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.users_resource
      }, callback);
    };

    MojioClient.prototype.users = function(callback) {
      return this._users((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    Vehicle
     */

    MojioClient.prototype.vehicles_resource = 'Vehicles';

    MojioClient.prototype._vehicles = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.vehicles_resource
      }, callback);
    };

    MojioClient.prototype.vehicles = function(callback) {
      return this._vehicles((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    Product
     */

    MojioClient.prototype.products_resource = 'Products';

    MojioClient.prototype._products = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.products_resource
      }, callback);
    };

    MojioClient.prototype.products = function(callback) {
      return this._products((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    Subscription
     */

    MojioClient.prototype.subscriptions_resource = 'Subscriptions';

    MojioClient.prototype._subscriptions = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.subscriptions_resource
      }, callback);
    };

    MojioClient.prototype.subscriptions = function(callback) {
      return this._subscriptions((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    Event
     */

    MojioClient.prototype.events_resource = 'Events';

    MojioClient.prototype._events = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.events_resource
      }, callback);
    };

    MojioClient.prototype.events = function(callback) {
      return this._events((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
            Schema
     */

    MojioClient.prototype.schema_resource = 'Schema';

    MojioClient.prototype._schema = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.schema_resource
      }, callback);
    };

    MojioClient.prototype.schema = function(callback) {
      return this._schema((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
            Observer
     */

    MojioClient.prototype.oserver_resource = 'Observer';

    MojioClient.prototype._observer = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.observer_resource
      }, callback);
    };

    MojioClient.prototype.observer = function(callback) {
      return this._observer((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };

    MojioClient.prototype.trip_observer = function(callback) {
      return this.request({
        method: 'POST',
        resource: this.observer_resource
      }, callback);
    };

    return MojioClient;

  })();

}).call(this);

//# sourceMappingURL=MojioClient.map

},{"./HttpBrowserWrapper":1}]},{},[2])
(2)
});