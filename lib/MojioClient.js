// Generated by CoffeeScript 1.7.1
(function() {
  var Http, MojioClient;

  Http = require('./HttpNodeWrapper');

  module.exports = MojioClient = (function() {
    var App, Trip, defaults, mojio_models;

    defaults = {
      hostname: 'sandbox.api.moj.io',
      port: '80',
      version: 'v1'
    };

    function MojioClient(options) {
      var _base, _base1, _base2;
      this.options = options;
      if (this.options == null) {
        this.options = {
          hostname: defaults.hostname,
          port: this.defaults.port,
          version: this.defaults.version
        };
      }
      if ((_base = this.options).hostname == null) {
        _base.hostname = defaults.hostname;
      }
      if ((_base1 = this.options).port == null) {
        _base1.port = defaults.port;
      }
      if ((_base2 = this.options).version == null) {
        _base2.version = defaults.version;
      }
      this.options.application = this.options.application;
      this.options.secret = this.options.secret;
      this.options.observerTransport = 'SingalR';
      this.conn = null;
      this.hub = null;
      this.connStatus = null;
      this.token = null;
    }


    /*
        Helpers
     */

    MojioClient.prototype._makeParameters = function(params) {
      var property, query, value;
      if (params.length === 0) {
        '';
      }
      query = '?';
      for (property in params) {
        value = params[property];
        query += "" + property + "=" + value + "&";
      }
      return query.slice(0, -1);
    };

    MojioClient.prototype.request = function(request, callback) {
      var http, parts;
      parts = {
        hostname: this.options.hostname,
        host: this.options.hostname,
        port: this.options.port,
        path: '/' + this.options.version,
        method: request.method,
        withCredentials: false
      };
      if ((request.resource != null)) {
        parts.path += '/' + request.resource;
      }
      if ((request.id != null) && request.id !== '') {
        parts.path += '/' + request.id;
      }
      if ((request.parameters != null) && Object.keys(request.parameters).length > 0) {
        parts.path += this._makeParameters(request.parameters);
      }
      parts.headers = {};
      parts.headers["MojioAPIToken"] = getTokenId();
      if ((request.headers != null)) {
        parts.headers += request.headers;
      }
      if (request.body) {
        parts.body = request.body;
      }
      http = new Http();
      return http.request(parts, callback);
    };


    /*
        Login
     */

    MojioClient.prototype.login_resource = 'Login';

    MojioClient.prototype._login = function(username, password, callback) {
      return this.request({
        method: 'POST',
        resource: this.login_resource,
        id: this.options.application,
        parameters: {
          userOrEmail: username,
          password: password,
          secretKey: this.options.secret
        }
      }, callback);
    };

    MojioClient.prototype.login = function(username, password, callback) {
      return this._login(username, password, (function(_this) {
        return function(error, result) {
          if ((result != null)) {
            _this.token = result;
          }
          return callback(error, result);
        };
      })(this));
    };

    MojioClient.prototype._logout = function(callback) {
      return this.request({
        method: 'DELETE',
        resource: this.login_resource,
        id: typeof mojio_token !== "undefined" && mojio_token !== null ? mojio_token : getTokenId()
      }, callback);
    };

    MojioClient.prototype.logout = function(callback) {
      return this._logout((function(_this) {
        return function(error, result) {
          _this.token = null;
          return callback(error, result);
        };
      })(this));
    };


    /*
        CRUD
     */

    MojioClient.prototype.get = function(request, callback) {
      return this.request(request, callback);
    };

    MojioClient.prototype.post = function(request, callback) {
      return this.request(request, callback);
    };

    MojioClient.prototype.put = function(request, callback) {
      return this.request(request, callback);
    };

    MojioClient.prototype["delete"] = function(request, callback) {
      return this.request(request, callback);
    };

    mojio_models = {};

    App = require('../src/models/App');

    mojio_models['App'] = App;

    MojioClient.prototype.make_model = function(type, json) {
      var object;
      if (json.Data instanceof Array) {
        object = new mojio_models[type](json.Data[0]);
      } else if ((json.Data != null)) {
        object = new mojio_models[type](json.Data);
      } else {
        object = new mojio_models[type](json);
      }
      return object;
    };


    /*
    App
     */

    MojioClient.prototype.postApp = function(app_model, callback) {
      return this.request({
        method: 'POST',
        resource: 'Apps',
        body: JSON.stringify(app_model)
      }, callback);
    };

    MojioClient.prototype.putApp = function(app_model, callback) {
      return this.request({
        method: 'PUT',
        resource: 'Apps',
        body: JSON.stringify(app_model)
      }, callback);
    };

    MojioClient.prototype.deleteApp = function(app_model, callback) {
      return this.request({
        method: 'PUT',
        resource: 'Apps',
        parameters: JSON.stringify({
          id: app_model.id
        })
      }, callback);
    };

    MojioClient.prototype.getApps = function(parameters, callback) {
      return this.request({
        method: 'GET',
        resource: 'Apps',
        parameters: parameters
      }, (function(_this) {
        return function(error, result) {
          return callback(error, _this.make_model('App', result));
        };
      })(this));
    };

    MojioClient.prototype.getApp = function(id, callback) {
      return this.request({
        method: 'GET',
        resource: 'Apps',
        parameters: {
          id: id
        }
      }, (function(_this) {
        return function(error, result) {
          return callback(error, _this.make_model('App', result));
        };
      })(this));
    };

    MojioClient.prototype.apps = function(callback) {
      console.log("Deprication Warning: Use getApps instead");
      return this.getApps({}, callback);
    };

    MojioClient.prototype.observeApp = function(id, callback) {
      return this.request({
        method: 'PUT',
        resource: 'Observer',
        parameters: {
          Subject: 'App',
          SubjectId: id
        }
      }, callback);
    };

    MojioClient.prototype.unobserveApp = function(id, callback) {
      return this.request({
        method: 'DELETE',
        resource: 'Observer',
        parameters: {
          Subject: 'App',
          SubjectId: id
        }
      }, callback);
    };

    MojioClient.prototype.validateEntityDescriptor = function(entities, callback) {
      if ((entities != null) && entities(typeof Array)) {
        return callback(null, entities);
      } else if ((entities != null) && entities(type in Object)) {
        return callback(null, [entities]);
      } else {
        return callback("Entity must be an objects specifying a type and a guid id: { type: string id: string } or an array of objects.", null);
      }
    };

    MojioClient.prototype._observe = function(entity, callback) {};

    MojioClient.prototype._unobserve = function(entity, callback) {};

    MojioClient.prototype._unobserveAll = function() {};

    MojioClient.prototype.observe = function(entityDescriptor, callback) {
      return this.validateEntityDescriptor(entityDescriptor, function(error, entities) {
        var entity, observers, _i, _len;
        if (error != null) {
          return;
        }
        observers = [];
        for (_i = 0, _len = entities.length; _i < _len; _i++) {
          entity = entities[_i];
          this.observe(entity, function(error, result) {
            return observers.push(result);
          });
        }
        return callback(null, "Subscribed");
      });
    };

    MojioClient.prototype.unobserve = function(entityDescriptor, callback) {
      if (!(entityDescriptor != null)) {
        this.unobserveAll();
        return callback(null, "Un-Subscribed");
      } else {
        return this.validateEntityDescriptor(entityDescriptor, function(error, entities) {
          var entity, _i, _len;
          if (error != null) {
            callback(error, null);
          }
          for (_i = 0, _len = entities.length; _i < _len; _i++) {
            entity = entities[_i];
            this.unobserve(entity);
          }
          return callback(null, "Un-Subscribed");
        });
      }
    };


    /*
    Mojio
     */

    MojioClient.prototype.mojios_resource = 'Mojios';

    MojioClient.prototype._mojios = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.mojios_resource
      }, callback);
    };

    MojioClient.prototype.mojios = function(callback) {
      return this._mojios((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    Trip
     */

    MojioClient.prototype.trips_resource = 'Trips';

    Trip = require('../src/models/Trip');

    MojioClient.prototype._trips = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.trips_resource
      }, callback);
    };

    MojioClient.prototype.trips = function(callback) {
      return this._trips((function(_this) {
        return function(error, result) {
          var object;
          if (result.Data instanceof Array) {
            object = new Trip(result.Data[0]);
          } else if ((result.Data != null)) {
            object = new Trip(result.Data);
          } else {
            object = new Trip(result);
          }
          return callback(error, object);
        };
      })(this));
    };


    /*
    User
     */

    MojioClient.prototype.users_resource = 'Users';

    MojioClient.prototype._users = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.users_resource
      }, callback);
    };

    MojioClient.prototype.users = function(callback) {
      return this._users((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    Vehicle
     */

    MojioClient.prototype.vehicles_resource = 'Vehicles';

    MojioClient.prototype._vehicles = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.vehicles_resource
      }, callback);
    };

    MojioClient.prototype.vehicles = function(callback) {
      return this._vehicles((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    Product
     */

    MojioClient.prototype.products_resource = 'Products';

    MojioClient.prototype._products = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.products_resource
      }, callback);
    };

    MojioClient.prototype.products = function(callback) {
      return this._products((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    Subscription
     */

    MojioClient.prototype.subscriptions_resource = 'Subscriptions';

    MojioClient.prototype._subscriptions = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.subscriptions_resource
      }, callback);
    };

    MojioClient.prototype.subscriptions = function(callback) {
      return this._subscriptions((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
    Event
     */

    MojioClient.prototype.events_resource = 'Events';

    MojioClient.prototype._events = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.events_resource
      }, callback);
    };

    MojioClient.prototype.events = function(callback) {
      return this._events((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
            Schema
     */

    MojioClient.prototype.schema_resource = 'Schema';

    MojioClient.prototype._schema = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.schema_resource
      }, callback);
    };

    MojioClient.prototype.schema = function(callback) {
      return this._schema((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
            Observer
     */

    MojioClient.prototype.observer_resource = 'Observe';

    MojioClient.prototype._observer = function(callback) {
      return this.request({
        method: 'GET',
        resource: this.observer_resource
      }, callback);
    };

    MojioClient.prototype.observer = function(callback) {
      return this._observer((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
        Signal R
     */

    MojioClient.prototype.getTokenId = function() {
      if (this.token != null) {
        return this.token.id;
      } else {
        return null;
      }
    };

    MojioClient.prototype.getUserId = function() {
      if (this.token != null) {
        return this.token.UserId;
      } else {
        return null;
      }
    };

    MojioClient.prototype.isLoggedIn = function() {
      return getUserId() !== null;
    };

    MojioClient.prototype.getCurrentUser = function(func) {
      if ((this.user != null)) {
        func(this.user);
      } else if (isLoggedIn()) {
        get('users', getUserId()).done(function(user) {
          if (!(user != null)) {
            return;
          }
          if (getUserId() === this.user._id) {
            this.user = user;
          }
          return func(this.user);
        });
      } else {
        return false;
      }
      return true;
    };

    MojioClient.prototype.dataByMethod = function(data, method) {
      switch (method.toUpperCase()) {
        case 'POST':
        case 'PUT':
          return JSON.stringify(data);
        default:
          return data;
      }
    };

    MojioClient.prototype.getHub = function() {
      if ((this.hub != null)) {
        return this.hub;
      }
      this.conn = $.hubConnection(settings.url + "/signalr", {
        useDefaultPath: false
      });
      this.hub = _conn.createHubProxy('hub');
      this.hub.on("error", function(data) {
        return log(data);
      });
      this.connStatus = this.conn.start().done(function() {
        return this.connStatus = null;
      });
      return this.hub;
    };

    MojioClient.prototype.subscribe = function(type, ids, groups) {
      var action, hub, _ref;
      hub = getHub();
      if (!groups) {
        groups = Mojio.EventTypes;
      }
      if (hub.connection.state !== 1) {
        if (this.connStatus) {
          this.connStatus.done(function() {
            return subscribe(type, ids, groups);
          });
        } else {
          this.connStatus = hub.connection.start().done(function() {
            return subscribe(type, ids, groups);
          });
        }
        return this.connStatus;
      }
      action = (_ref = ids instanceof Array) != null ? _ref : {
        "Subscribe": "SubscribeOne"
      };
      return hub.invoke(action, getTokenId(), type, ids, groups);
    };

    MojioClient.prototype.unsubscribe = function(type, ids, groups) {
      var hub;
      hub = getHub();
      if (!groups) {
        groups = Mojio.EventTypes;
      }
      if (hub.connection.state !== 1) {
        if (this.connStatus) {
          this.connStatus.done(function() {
            return unsubscribe(type, ids, groups);
          });
        } else {
          this.connStatus = hub.connection.start().done(function() {
            return unsubscribe(type, ids, groups);
          });
        }
        return this.connStatus;
      }
      return hub.invoke("Unsubscribe", getTokenId(), type, ids, groups);
    };

    return MojioClient;

  })();

}).call(this);

//# sourceMappingURL=MojioClient.map
